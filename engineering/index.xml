<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Engineerings on Data Scientist Hiroki&#39;s Blog</title>
    <link>https://dshiroki.com/engineering/</link>
    <description>Recent content in Engineerings on Data Scientist Hiroki&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 11 Feb 2024 16:35:46 +0900</lastBuildDate><atom:link href="https://dshiroki.com/engineering/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Matlabのtf2ssの謎</title>
      <link>https://dshiroki.com/engineering/20240211/</link>
      <pubDate>Sun, 11 Feb 2024 16:35:46 +0900</pubDate>
      
      <guid>https://dshiroki.com/engineering/20240211/</guid>
      <description>Matlabが好きだ。
なぜなら、それはシンプルで、必要最低限のプログラミング言語習得で、
大きなことが簡単にできるからだ。
それでいて、構造的で、システマチック。
「そなたは美しい」
こんにちは、データサイエンティストひろき🐶です。
伝達関数の状態空間表現tf2ssの謎 さて、
前回こちらのブログで紹介した伝達関数から状態空間表現の係数(A,B,C,D)を求める便利な関数“tf2ss”とても便利です。
 例えば、上記モデルの伝達関数から状態空間表現の係数を求めてみましょう。
$$\begin{align*} G=\frac{x}{y}=\frac{cs+k}{ms^2+cs+k} \
\end{align*}$$
使い方は簡単。
例えば下記のようなMatlabコードになります。
% パラメータの定義 m = 2; % 質点 [kg]  k = 1; % バネのばね定数 [N/m] c = 3; % ダンパーの減衰係数 [N.s/m] num=[c k]; den=[m c k]; [A,B,C,D]=tf2ss(num,den); % 状態空間モデルの作成 sys = ss(A, B, C, D); % 結果のプロット figure; bode(sys) grid on; ここでtf2ssで出力されたA,B,C,Dの中身をみてみると、
$$ A \begin{align*} &amp;amp;= \end{align*} \begin{pmatrix} -1.5 &amp;amp; -0.5 \\
1 &amp;amp; 0 \\</description>
    </item>
    
    <item>
      <title>伝達関数と状態空間表現の関係</title>
      <link>https://dshiroki.com/engineering/20240129/</link>
      <pubDate>Sun, 28 Jan 2024 21:35:46 +0900</pubDate>
      
      <guid>https://dshiroki.com/engineering/20240129/</guid>
      <description>生きていくことって結構難しいなと感じることがあるかもしれません。
たくさんやらなければいけないことがあって、プレッシャーを感じながら、
ついつい焦ってしまい、失敗して、結局やり直し。
「忙しい時こそ、焦らない。早くやってもいいけど、焦ってやらない」
ほっとお茶でも飲んで、落ち着いて、やっていきましょう^^
こんにちは、データサイエンティストひろき🐶です。
伝達関数の状態空間表現 さて、
前回こちらのブログで紹介した下図の1自由度振動モデル、
 この伝達関数
$$\begin{align*} G=\frac{x}{y}=\frac{cs+k}{ms^2+cs+k} \
\end{align*}$$
を状態空間表現で記述してみたいと思います。
まず、状態空間表現の基本形は下記2式（状態方程式と観測方程式）でした。
$$ \mathbf{\dot{x}} \begin{align*} &amp;amp;= \end{align*} A \mathbf{x} + B u ・・・状態方程式 $$
$$ y \begin{align*} &amp;amp;= \end{align*} C \mathbf{x} + D u ・・・観測方程式 $$
ちなみに、
$$ \mathbf{x} \begin{align*} &amp;amp;= \end{align*} \begin{pmatrix} x \\
\dot{x} \\
\end{pmatrix} $$
$$ u:入力
$$ とします。
つまり今回は、
伝達関数Gから状態空間表現A,B,C,Dを求める方法   を紹介します。
まず状態方程式 $$ \mathbf{\dot{x}} \begin{align*} &amp;amp;= \end{align*} A \mathbf{x} + B u $$</description>
    </item>
    
    <item>
      <title>1自由度振動運動方程式の状態空間表現(続々)</title>
      <link>https://dshiroki.com/engineering/20240128/</link>
      <pubDate>Sat, 27 Jan 2024 23:55:29 +0900</pubDate>
      
      <guid>https://dshiroki.com/engineering/20240128/</guid>
      <description>1自由度振動運動方程式 こんにちは、データサイエンティストひろき🐶です。
2024年が始まって1ヶ月が過ぎようとしております。
時の流れは早いですね。
こうしてブログを書いている時は、忙しい日々を忘れ、
自分の世界観を表現できる大切な時間です。
さて、
前回こちらのブログで紹介した下図の1自由度振動運動方程式を解くためのMatlabコード
ですが、
 入力fを
$$\begin{align*} f=c\dot{y}+ky&amp;amp; \
\end{align*}$$
のように力入力で与えています。　しかし、本来は、図の通り、変位入力を与えた場合の状態空間表現が知りたくなると思います。
そこで今回は、
1自由度振動モデルに変位入力をインプットした時の振る舞いを状態空間表現で表す方法   を紹介します。 まずこちらの1自由度振動モデル。
下記のように運動方程式で書くことができます。
$$\begin{align*} m\ddot{x}+c\dot{x}+kx&amp;amp;=c\dot{y}+ky&amp;amp; \
\end{align*}$$
これをラプラス変換して、伝達関数G(=出力/入力)を求めてみます。
$$\begin{align*} (ms^2+cs+k)x=(cs+k)y \
\end{align*}$$
なので、
$$\begin{align*} G=\frac{x}{y}=\frac{cs+k}{ms^2+cs+k} \
\end{align*}$$
伝達関数がわかれば、それを状態空間表現に変換すればいいだけ。
実は変換式が存在します。
次回以降、数式を用いて、詳しく説明していきたいと思います。
それでは今日はこの辺で
最後まで読んでくださりありがとうございました。
Love&amp;amp;Respect♡
Hiroki🐶</description>
    </item>
    
    <item>
      <title>1自由度振動運動方程式の状態空間表現(続)</title>
      <link>https://dshiroki.com/engineering/20231227/</link>
      <pubDate>Wed, 27 Dec 2023 23:50:43 +0900</pubDate>
      
      <guid>https://dshiroki.com/engineering/20231227/</guid>
      <description>1自由度振動運動方程式 こんにちは、データサイエンティストひろき🐶です。
前回こちらのブログで紹介した1自由度振動運動方程式を解くためのMatlabコード
もう少し変形して、このような、入力と出力の形にして、解いてみたいと思います。
 まずこちらの1自由度振動モデル。
普通に数式で表すと下記のように運動方程式で書くことができます。
$$\begin{align*} m\ddot{x}+c\dot{x}+kx&amp;amp;=f \
\end{align*}$$
ここで、
$$\begin{align*} f=c\dot{y}+ky&amp;amp; \
\end{align*}$$
です。
こちらのモデルを解くMatlabコードは、前回のコードを少し変更して、下記のようになります。
% パラメータの定義 m = 1; % 質点 [kg] ※適切な値を設定してください k = 1; % バネのばね定数 [N/m] ※適切な値を設定してください c = 1; % ダンパーの減衰係数 [N.s/m] ※適切な値を設定してください % 微分方程式の定義 A = [0 1; -k/m -c/m]; B = [0; 1/m]; C = [1 0]; D = 0; % 状態空間モデルの作成 sys = ss(A, B, C, D); % 応答のシミュレーション t = linspace(0, 50, 1000); % シミュレーション時間 [s] %外力fをシステムに入力 Y=1; w0=sqrt(k/m); f = c*Y*w0*cos(w0*t)+k*Y * sin(w0*t); % 外力の時系列 y = lsim(sys, f, t); % 結果のプロット figure; plot(t, y); xlabel(&amp;#39;Time [s]&amp;#39;); ylabel(&amp;#39;Displacement [m]&amp;#39;); title(&amp;#39;Response of the physical model&amp;#39;); grid on; 実行すると、下記のようなグラフが得られたのではないでしょうか。  このようにM K Cのシステムにfという入力を与えた時の出力xを求めることが簡単にかつ、システマチックにできるのが、現代制御の魅力です。</description>
    </item>
    
    <item>
      <title>1自由度振動運動方程式の状態空間表現</title>
      <link>https://dshiroki.com/engineering/20231031/</link>
      <pubDate>Tue, 31 Oct 2023 21:03:29 +0900</pubDate>
      
      <guid>https://dshiroki.com/engineering/20231031/</guid>
      <description>1自由度振動運動方程式 こんにちは、データサイエンティストひろき🐶です。
前回こちらのブログで紹介した物理モデルのMatlabコード
実は、状態空間表現というとてもオシャレな解き方をしています。
今回はその状態空間表現について、少し深くみていきたいと思います。
そこで今回は、
状態空間表現とは 1自由度振動モデルを状態空間表現で表すメリット   を紹介します。  まずこちらの1自由度振動モデル。
普通に数式で表すと下記のように運動方程式で書くことができます。
$$\begin{align*} m\ddot{x}+c\dot{x}+kx&amp;amp;=f \
\end{align*}$$
でも前回紹介したMatlabコードでは、
% 微分方程式の定義 A = [0 1; -k/m -c/m]; B = [0; 1/m]; C = [1 0]; D = 0; % 状態空間モデルの作成 sys = ss(A, B, C, D); となっており、何やら様子が違います。
これは状態空間表現といって、非常にオシャレな、有意義な表現方法で
運動方程式を変形して、解いてます。
実は、
$$\begin{align*} m\ddot{x}+c\dot{x}+kx&amp;amp;=f \
\end{align*}$$
この方程式を
$$\begin{pmatrix} \dot{x} \\
\ddot{x} \\
\end{pmatrix} \begin{align*} &amp;amp;= \end{align*} \begin{pmatrix} 0 &amp;amp; 1 \\
-k/m &amp;amp; -c/m \\</description>
    </item>
    
    <item>
      <title>ChatGPT x 手書きの物理モデリングをプログラミング</title>
      <link>https://dshiroki.com/engineering/20231029/</link>
      <pubDate>Sun, 29 Oct 2023 17:04:46 +0900</pubDate>
      
      <guid>https://dshiroki.com/engineering/20231029/</guid>
      <description>ChatGPTを使って物理モデリングをプログラミング 理系女子必見！学習の幅が広がる！とても便利なChatGPTの使い方！
こんにちは、データサイエンティストひろき🐶です。 最近ChatGPTに目が備わったと話題ですね！
例えば下記Youtubeでも紹介されています。
  早速応用してみたい！
例えば、工学系の大学1年生ではじめに習う物理モデルといっても過言ではない、代表的なモデルは下記、1自由度振動モデルではないでしょうか。
そんな物理モデルを自由に描いて、それを数値計算出来たらいいな。
そんな夢を実現してくれるのが、ChatGPTです！
そこで今回は、
ChatGPTを使って手書きの1自由度振動モデルをプログラミングする方法   を紹介します。 物理モデルとして、下記1自由度振動モデルを考えます。  まずChatGPTに上記モデルのスクショをペースト。
そして、「この物理モデルを解くMatlabコードを教えて〜」
と入力してみてください。
そうすると、下記コードが返ってきます。
% パラメータの定義 m = 1; % 質点 [kg] ※適切な値を設定してください k = 1; % バネのばね定数 [N/m] ※適切な値を設定してください c = 1; % ダンパーの減衰係数 [N.s/m] ※適切な値を設定してください f = 1; % 外力 [N] ※適切な値や関数を設定してください % 微分方程式の定義 A = [0 1; -k/m -c/m]; B = [0; 1/m]; C = [1 0]; D = 0; % 状態空間モデルの作成 sys = ss(A, B, C, D); % 応答のシミュレーション t = linspace(0, 10, 1000); % シミュレーション時間 [s] u = f * ones(size(t)); % 外力の時系列 y = lsim(sys, u, t); % 結果のプロット figure; plot(t, y); xlabel(&amp;#39;Time [s]&amp;#39;); ylabel(&amp;#39;Displacement [m]&amp;#39;); title(&amp;#39;Response of the physical model&amp;#39;); grid on;  本当に動くのか？？？</description>
    </item>
    
  </channel>
</rss>
